<?php

namespace App\Models;

use App\Enums\PointType;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Curation extends Model
{
    use HasFactory;

    protected $fillable = [
        "title",
        "user_id",
        "count_view",
        "memo"
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::updating(function($model){
            if($model->count_view != $model->getOriginal("count_view")){
                if($model->count_view == 1)
                    $model->user->pointHistories()->create([
                        "type" => PointType::CURATION_SHARE,
                        "point" => PointType::$points[PointType::CURATION_SHARE]
                    ]);

                if($model->count_view <= 100 && ($model->count_view % 10) == 0)
                    $model->user->pointHistories()->create([
                        "type" => PointType::CURATION_SHARE,
                        "point" => PointType::$points[PointType::CURATION_SHARE_INCREASE]
                    ]);
            }
        });
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function newspapers()
    {
        return $this->hasMany(Newspaper::class);
    }

}
