<?php

namespace App\Models;

use Carbon\Carbon;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;


class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    use SoftDeletes;

    protected $fillable = [
        'id',
        "unique_id",
        'name',
        'level',
        "point",
        "template_id",

        'password',
        "verified_at",
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];


    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function($model){
            $template = Template::where("created_at", "asc")->first();

            if($template)
                $model->template_id = $template->id;
        });
    }

    public static function getName($khan_id)
    {
        $response = \Illuminate\Support\Facades\Http::get("https://member.khan.co.kr/mypage/api/kpf/get_memberData.html?khan_id=".$khan_id);

        $response = json_decode($response->body());

        if($response->response == "success")
            return isset($response->id) ? $response->id : $response->email;

        return null;
    }

    public function template()
    {
        return $this->belongsTo(Template::class);
    }

    public function readHistories()
    {
        return $this->hasMany(ReadHistory::class);
    }


    public function pointHistories()
    {
        return $this->hasMany(PointHistory::class);
    }

    public function answers()
    {
        return $this->hasMany(Answer::class);
    }

    public function curations()
    {
        return $this->hasMany(Curation::class);
    }

    public function newspapers()
    {
        return $this->hasManyThrough(Newspaper::class, Curation::class);
    }
}
